---
// Carousel.astro - Migración del componente Vue a Astro
interface Props {
  items: any[];
  autoplay?: boolean;
  autoplaySpeed?: number;
  loop?: boolean;
  showArrows?: boolean;
}

const { 
  items, 
  autoplay = true, 
  autoplaySpeed = 3000, 
  loop = true, 
  showArrows = true 
} = Astro.props;
---

<div 
  id="carousel" 
  class="carousel block" 
  data-autoplay={autoplay}
  data-autoplay-speed={autoplaySpeed}
  data-loop={loop}
>
  <!-- Slides -->
  <div class="carousel-track">
    <!-- Primera copia de los items -->
    {items.map((item, index) => (
      <div class="carousel-item flex items-center justify-center">
        <div class="carousel-card">
          <img src={typeof item === 'string' ? item : item.src} alt={`Imagen ${index + 1}`} />
          <div class="card-overlay"></div>
        </div>
      </div>
    ))}
    
    <!-- Segunda copia de los items para el efecto continuo -->
    {items.map((item, index) => (
      <div class="carousel-item flex items-center justify-center">
        <div class="carousel-card">
          <img src={typeof item === 'string' ? item : item.src} alt={`Imagen ${index + 1}`} />
          <div class="card-overlay"></div>
        </div>
      </div>
    ))}
  </div>
</div>

<style>
.carousel {
  position: relative;
  overflow: hidden;
  width: 100%;
  max-width: 100%;
  margin: 40px auto 0;
  padding: 0;
}

@keyframes scroll {
  0% { transform: translateX(0); }
  100% { transform: translateX(calc(-100% / 2)); }
}

.carousel-track {
  display: flex;
  animation: scroll 30s linear infinite;
  gap: 20px;
  width: calc(100% * 2); /* Duplicamos el ancho para alojar dos copias completas */
  padding-left: 20px;
}
.carousel-item {
  flex: 0 0 auto;
  text-align: center;
  padding: 6px;
  position: relative;
  margin-right: 20px;
}

@media (min-width: 768px) {
  .carousel {
    max-width: 100%;
    margin: 50px auto 0;
  }
}

@media (min-width: 1024px) {
  .carousel {
    max-width: 100%;
    margin: 45px auto 0;
  }
}

.carousel-card {
  position: relative;
  background: linear-gradient(135deg, rgba(202, 170, 95, 0.1), rgba(202, 170, 95, 0.2));
  border-radius: 20px;
  padding: 16px;
  margin: 0 auto;
  width: 87px;
  height: 87px;
  display: flex;
  align-items: center;
  justify-content: center;
  border: 2px solid rgba(202, 170, 95, 0.3);
  backdrop-filter: blur(8px);
  transition: all 0.3s ease;
  box-shadow: 0 8px 32px rgba(0, 0, 0, 0.1);
  overflow: hidden;
}

.carousel-card:hover {
  transform: translateY(-4px) scale(1.05);
  border-color: rgba(202, 170, 95, 0.6);
  box-shadow: 0 12px 40px rgba(0, 0, 0, 0.2);
}

.carousel-card::before {
  content: '';
  position: absolute;
  top: 0;
  left: -100%;
  width: 100%;
  height: 100%;
  background: linear-gradient(90deg, transparent, rgba(255, 255, 255, 0.2), transparent);
  transition: left 0.5s ease;
}

.carousel-card:hover::before {
  left: 100%;
}

.carousel-card img {
  width: 51px;
  height: 51px;
  object-fit: contain;
  filter: drop-shadow(0 4px 8px rgba(0, 0, 0, 0.1));
  transition: all 0.3s ease;
  z-index: 2;
  position: relative;
}

.carousel-card:hover img {
  transform: scale(1.1);
  filter: drop-shadow(0 6px 12px rgba(0, 0, 0, 0.2));
}

.card-overlay {
  position: absolute;
  top: 0;
  left: 0;
  right: 0;
  bottom: 0;
  background: radial-gradient(circle at center, rgba(202, 170, 95, 0.05), transparent 70%);
  border-radius: 18px;
  pointer-events: none;
}

@media (min-width: 640px) {
  .carousel-card {
    width: 101px;
    height: 101px;
    padding: 16px;
  }
  
  .carousel-card img {
    width: 58px;
    height: 58px;
  }
}

@media (min-width: 768px) {
  .carousel-card {
    width: 115px;
    height: 115px;
    padding: 18px;
    border-radius: 22px;
  }
  
  .carousel-card img {
    width: 66px;
    height: 66px;
  }
}

@media (min-width: 1024px) {
  .carousel-card {
    width: 101px;
    height: 101px;
    padding: 16px;
  }
  
  .carousel-card img {
    width: 58px;
    height: 58px;
  }
}
</style>

<script>
  document.addEventListener('DOMContentLoaded', () => {
    const carousel = document.querySelector('.carousel');
    
    // Pausa la animación al pasar el ratón sobre el carrusel
    if (carousel) {
      carousel.addEventListener('mouseenter', () => {
        const track = carousel.querySelector('.carousel-track') as HTMLElement;
        if (track) {
          track.style.animationPlayState = 'paused';
        }
      });
      
      carousel.addEventListener('mouseleave', () => {
        const track = carousel.querySelector('.carousel-track') as HTMLElement;
        if (track) {
          track.style.animationPlayState = 'running';
        }
      });
    }
  });
</script>
