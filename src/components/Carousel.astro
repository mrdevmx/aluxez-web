---
// Carousel.astro - Migración del componente Vue a Astro
interface Props {
  items: any[];
  autoplay?: boolean;
  autoplaySpeed?: number;
  loop?: boolean;
  showArrows?: boolean;
}

const { 
  items, 
  autoplay = true, 
  autoplaySpeed = 3000, 
  loop = true, 
  showArrows = true 
} = Astro.props;
---

<div 
  id="carousel" 
  class="carousel block lg:hidden" 
  data-autoplay={autoplay}
  data-autoplay-speed={autoplaySpeed}
  data-loop={loop}
>
  <!-- Slides -->
  <div id="carousel-track" class="carousel-track">
    <!-- Elementos duplicados al final para efecto infinito -->
    {items.slice(-2).map((item, index) => (
      <div class="carousel-item flex items-center justify-center clone">
        <div class="carousel-card">
          <img src={typeof item === 'string' ? item : item.src} alt={`Imagen ${items.length - 2 + index + 1}`} />
          <div class="card-overlay"></div>
        </div>
      </div>
    ))}
    
    <!-- Elementos originales -->
    {items.map((item, index) => (
      <div class="carousel-item flex items-center justify-center" data-index={index}>
        <div class="carousel-card">
          <img src={typeof item === 'string' ? item : item.src} alt={`Imagen ${index + 1}`} />
          <div class="card-overlay"></div>
        </div>
      </div>
    ))}
    
    <!-- Elementos duplicados al inicio para efecto infinito -->
    {items.slice(0, 2).map((item, index) => (
      <div class="carousel-item flex items-center justify-center clone">
        <div class="carousel-card">
          <img src={typeof item === 'string' ? item : item.src} alt={`Imagen ${index + 1}`} />
          <div class="card-overlay"></div>
        </div>
      </div>
    ))}
  </div>
</div>

<style>
.carousel {
  position: relative;
  overflow: visible;
  width: 100%;
  max-width: 400px;
  margin: 40px auto 0;
  padding: 0 40px;
}
@media (min-width: 768px) {
  .carousel {
    max-width: 450px;
    margin: 50px auto 0;
    padding: 0 50px;
  }
}
@media (min-width: 1024px) {
  .carousel {
    max-width: 400px;
    margin: 45px auto 0;
    padding: 0 45px;
  }
}
.carousel-track {
  display: flex;
  transition: transform 0.5s ease-in-out;
  transform: translateX(0%);
  gap: 8px;
}
.carousel-item {
  min-width: 45%;
  flex-shrink: 0;
  text-align: center;
  padding: 6px;
  position: relative;
  transition: all 0.3s ease;
  opacity: 1;
  transform: scale(1);
}

@media (min-width: 768px) {
  .carousel-item {
    min-width: 40%;
  }
}

.carousel-card {
  position: relative;
  background: linear-gradient(135deg, rgba(202, 170, 95, 0.1), rgba(202, 170, 95, 0.2));
  border-radius: 20px;
  padding: 16px;
  margin: 0 auto;
  width: 87px;
  height: 87px;
  display: flex;
  align-items: center;
  justify-content: center;
  border: 2px solid rgba(202, 170, 95, 0.3);
  backdrop-filter: blur(8px);
  transition: all 0.3s ease;
  box-shadow: 0 8px 32px rgba(0, 0, 0, 0.1);
  overflow: hidden;
}

.carousel-card:hover {
  transform: translateY(-4px) scale(1.05);
  border-color: rgba(202, 170, 95, 0.6);
  box-shadow: 0 12px 40px rgba(0, 0, 0, 0.2);
}

.carousel-card::before {
  content: '';
  position: absolute;
  top: 0;
  left: -100%;
  width: 100%;
  height: 100%;
  background: linear-gradient(90deg, transparent, rgba(255, 255, 255, 0.2), transparent);
  transition: left 0.5s ease;
}

.carousel-card:hover::before {
  left: 100%;
}

.carousel-card img {
  width: 51px;
  height: 51px;
  object-fit: contain;
  filter: drop-shadow(0 4px 8px rgba(0, 0, 0, 0.1));
  transition: all 0.3s ease;
  z-index: 2;
  position: relative;
}

.carousel-card:hover img {
  transform: scale(1.1);
  filter: drop-shadow(0 6px 12px rgba(0, 0, 0, 0.2));
}

.card-overlay {
  position: absolute;
  top: 0;
  left: 0;
  right: 0;
  bottom: 0;
  background: radial-gradient(circle at center, rgba(202, 170, 95, 0.05), transparent 70%);
  border-radius: 18px;
  pointer-events: none;
}

@media (min-width: 640px) {
  .carousel-card {
    width: 101px;
    height: 101px;
    padding: 16px;
  }
  
  .carousel-card img {
    width: 58px;
    height: 58px;
  }
}

@media (min-width: 768px) {
  .carousel-card {
    width: 115px;
    height: 115px;
    padding: 18px;
    border-radius: 22px;
  }
  
  .carousel-card img {
    width: 66px;
    height: 66px;
  }
}

@media (min-width: 1024px) {
  .carousel-card {
    width: 101px;
    height: 101px;
    padding: 16px;
  }
  
  .carousel-card img {
    width: 58px;
    height: 58px;
  }
}
</style>

<script>
  interface CarouselElements {
    carousel: HTMLElement | null;
    track: HTMLElement | null;
  }

  interface CarouselConfig {
    autoplay: boolean;
    autoplaySpeed: number;
    loop: boolean;
    itemCount: number;
  }

  class AstroCarousel {
    private elements: CarouselElements;
    private config: CarouselConfig;
    private currentIndex: number = 0;
    private autoplayInterval: number | null = null;
    private realItemCount: number;
    private isTransitioning: boolean = false;

    constructor() {
      this.elements = {
        carousel: document.getElementById('carousel'),
        track: document.getElementById('carousel-track'),
      };
      
      // Obtener configuración del DOM
      const carousel = this.elements.carousel;
      this.realItemCount = document.querySelectorAll('.carousel-item:not(.clone)').length;
      this.config = {
        autoplay: carousel?.dataset.autoplay === 'true',
        autoplaySpeed: parseInt(carousel?.dataset.autoplaySpeed || '3000'),
        loop: carousel?.dataset.loop === 'true',
        itemCount: this.realItemCount
      };
      
      // Empezar en el primer elemento real (después de los clones)
      this.currentIndex = 2;
      
      this.init();
    }
    
    init(): void {
      this.bindEvents();
      // Asegurarse que el carrusel comienza en la posición correcta
      this.updateSlideInstant();
      setTimeout(() => {
        if (this.config.autoplay) {
          this.startAutoplay();
        }
      }, 100);
    }
    
    bindEvents(): void {
      this.elements.carousel?.addEventListener('mouseenter', () => this.stopAutoplay());
      this.elements.carousel?.addEventListener('mouseleave', () => this.startAutoplay());
    }
    
    goToSlide(index: number): void {
      if (this.isTransitioning) return;
      
      this.currentIndex = index + 2; // Ajustar por los clones al inicio
      this.updateSlide();
    }
    
    goToPrev(): void {
      if (this.isTransitioning) return;
      
      this.isTransitioning = true;
      this.currentIndex--;
      this.updateSlide();
      
      // Si llegamos a un clon, saltar al elemento real
      if (this.currentIndex < 2) {
        setTimeout(() => {
          this.currentIndex = this.realItemCount + 1;
          this.updateSlideInstant();
          this.isTransitioning = false;
        }, 300);
      } else {
        setTimeout(() => {
          this.isTransitioning = false;
        }, 300);
      }
    }
    
    goToNext(): void {
      if (this.isTransitioning) return;
      
      this.isTransitioning = true;
      this.currentIndex++;
      this.updateSlide();
      
      // Si llegamos a un clon, saltar al elemento real
      if (this.currentIndex >= this.realItemCount + 2) {
        setTimeout(() => {
          this.currentIndex = 2;
          this.updateSlideInstant();
          this.isTransitioning = false;
        }, 300);
      } else {
        setTimeout(() => {
          this.isTransitioning = false;
        }, 300);
      }
    }
    
    updateSlide(): void {
      if (this.elements.track) {
        const offset = this.currentIndex * 45; // 45% por elemento
        this.elements.track.style.transform = `translateX(-${offset}%)`;
      }
    }
    
    updateSlideInstant(): void {
      if (this.elements.track) {
        this.elements.track.style.transition = 'none';
        const offset = this.currentIndex * 45;
        this.elements.track.style.transform = `translateX(-${offset}%)`;
        
        // Restaurar la transición
        requestAnimationFrame(() => {
          if (this.elements.track) {
            this.elements.track.style.transition = 'transform 0.5s ease-in-out';
          }
        });
      }
    }
    
    startAutoplay(): void {
      if (this.config.autoplay && !this.autoplayInterval) {
        this.autoplayInterval = window.setInterval(() => {
          this.goToNext();
        }, this.config.autoplaySpeed);
      }
    }
    
    stopAutoplay(): void {
      if (this.autoplayInterval) {
        clearInterval(this.autoplayInterval);
        this.autoplayInterval = null;
      }
    }
  }

  // Inicializar cuando el DOM esté listo
  document.addEventListener('DOMContentLoaded', () => {
    new AstroCarousel();
  });
</script>
