---
// Carousel.astro - Migración del componente Vue a Astro
interface Props {
  items: any[];
  autoplay?: boolean;
  autoplaySpeed?: number;
  loop?: boolean;
  showDots?: boolean;
  showArrows?: boolean;
}

const { 
  items, 
  autoplay = true, 
  autoplaySpeed = 3000, 
  loop = true, 
  showDots = true, 
  showArrows = true 
} = Astro.props;
---

<div 
  id="carousel" 
  class="carousel block lg:hidden" 
  data-autoplay={autoplay}
  data-autoplay-speed={autoplaySpeed}
  data-loop={loop}
>
  <!-- Flechas de navegación -->
  {showArrows && (
    <>
      <button id="prev-btn" class="prev">
        &#10094;
      </button>
      <button id="next-btn" class="next">
        &#10095;
      </button>
    </>
  )}

  <!-- Slides -->
  <div id="carousel-track" class="carousel-track">
    {items.map((item, index) => (
      <div class="carousel-item flex items-center justify-center">
        <img src={typeof item === 'string' ? item : item.src} alt={`Imagen ${index + 1}`} />
      </div>
    ))}
  </div>

  <!-- Paginación (dots) -->
  {showDots && (
    <div class="dots">
      {items.map((_, index) => (
        <span 
          class={`dot ${index === 0 ? 'active' : ''}`}
          data-index={index}
        ></span>
      ))}
    </div>
  )}
</div>

<style>
.carousel {
  position: relative;
  overflow: hidden;
  width: 90%;
  max-width: 450px;
  margin: auto;
}
@media (min-width: 768px) {
  .carousel {
    width: 70%;
    max-width: 400px;
  }
}
@media (min-width: 1024px) {
  .carousel {
    width: 45%;
    max-width: 280px;
  }
}
.carousel-track {
  display: flex;
  transition: transform 0.5s ease-in-out;
  transform: translateX(0%);
}
.carousel-item {
  min-width: 100%;
  text-align: center;
}
.carousel-item img {
  margin: auto;
  width: 100px;
  height: 100px;
  object-fit: contain;
}
@media (min-width: 640px) {
  .carousel-item img {
    width: 120px;
    height: 120px;
  }
}
@media (min-width: 768px) {
  .carousel-item img {
    width: 150px;
    height: 150px;
  }
}
@media (min-width: 1024px) {
  .carousel-item img {
    width: 100px;
    height: 100px;
  }
}
.prev, .next {
  position: absolute;
  top: 50%;
  transform: translateY(-50%);
  background: transparent;
  color: #CAAA5F;
  border: none;
  padding: 12px;
  cursor: pointer;
  z-index: 10;
  font-size: 18px;
  font-weight: bold;
}
@media (min-width: 768px) {
  .prev, .next {
    font-size: 20px;
    padding: 15px;
  }
}
@media (min-width: 1024px) {
  .prev, .next {
    font-size: 16px;
    padding: 10px;
  }
}
.prev { left: 15px; }
.next { right: 15px; }
.dots {
  text-align: center;
  margin-top: 20px;
}
.dots span {
  height: 12px;
  width: 12px;
  margin: 6px;
  background: #dac48f;
  display: inline-block;
  border-radius: 50%;
  cursor: pointer;
  transition: all 0.3s ease;
}
@media (min-width: 768px) {
  .dots {
    margin-top: 25px;
  }
  .dots span {
    height: 14px;
    width: 14px;
    margin: 8px;
  }
}
@media (min-width: 1024px) {
  .dots {
    margin-top: 15px;
  }
  .dots span {
    height: 10px;
    width: 10px;
    margin: 5px;
  }
}
.dots .active {
  background: #CAAA5F;
}
</style>

<script>
  // JavaScript para manejar la funcionalidad del carousel
  interface CarouselElements {
    carousel: HTMLElement | null;
    track: HTMLElement | null;
    prevBtn: HTMLElement | null;
    nextBtn: HTMLElement | null;
    dots: NodeListOf<Element>;
  }

  interface CarouselConfig {
    autoplay: boolean;
    autoplaySpeed: number;
    loop: boolean;
    itemCount: number;
  }

  class AstroCarousel {
    private elements: CarouselElements;
    private config: CarouselConfig;
    private currentIndex: number = 0;
    private autoplayInterval: number | null = null;

    constructor() {
      this.elements = {
        carousel: document.getElementById('carousel'),
        track: document.getElementById('carousel-track'),
        prevBtn: document.getElementById('prev-btn'),
        nextBtn: document.getElementById('next-btn'),
        dots: document.querySelectorAll('.dot')
      };
      
      // Obtener configuración del DOM
      const carousel = this.elements.carousel;
      this.config = {
        autoplay: carousel?.dataset.autoplay === 'true',
        autoplaySpeed: parseInt(carousel?.dataset.autoplaySpeed || '3000'),
        loop: carousel?.dataset.loop === 'true',
        itemCount: this.elements.dots.length
      };
      
      this.init();
    }
    
    init(): void {
      this.bindEvents();
      if (this.config.autoplay) {
        this.startAutoplay();
      }
    }
    
    bindEvents(): void {
      this.elements.prevBtn?.addEventListener('click', () => this.goToPrev());
      this.elements.nextBtn?.addEventListener('click', () => this.goToNext());
      
      this.elements.dots.forEach((dot: Element, index: number) => {
        dot.addEventListener('click', () => this.goToSlide(index));
      });
      
      this.elements.carousel?.addEventListener('mouseenter', () => this.stopAutoplay());
      this.elements.carousel?.addEventListener('mouseleave', () => this.startAutoplay());
    }
    
    goToSlide(index: number): void {
      if (this.config.loop || (index >= 0 && index < this.config.itemCount)) {
        this.currentIndex = index;
        this.updateSlide();
      }
    }
    
    goToPrev(): void {
      const prevIndex = this.currentIndex === 0 ? this.config.itemCount - 1 : this.currentIndex - 1;
      this.goToSlide(prevIndex);
    }
    
    goToNext(): void {
      const nextIndex = this.currentIndex === this.config.itemCount - 1 ? 0 : this.currentIndex + 1;
      this.goToSlide(nextIndex);
    }
    
    updateSlide(): void {
      if (this.elements.track) {
        this.elements.track.style.transform = `translateX(-${this.currentIndex * 100}%)`;
      }
      
      // Actualizar dots
      this.elements.dots.forEach((dot: Element, index: number) => {
        dot.classList.toggle('active', index === this.currentIndex);
      });
    }
    
    startAutoplay(): void {
      if (this.config.autoplay && !this.autoplayInterval) {
        this.autoplayInterval = window.setInterval(() => {
          this.goToNext();
        }, this.config.autoplaySpeed);
      }
    }
    
    stopAutoplay(): void {
      if (this.autoplayInterval) {
        clearInterval(this.autoplayInterval);
        this.autoplayInterval = null;
      }
    }
  }

  // Inicializar cuando el DOM esté listo
  document.addEventListener('DOMContentLoaded', () => {
    new AstroCarousel();
  });
</script>
