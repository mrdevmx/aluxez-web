---
// Menu.astro - Migración del componente Vue a Astro
const brandLogo = '/logos/brand-logo-menu.png';

const menuItems = [
  {
    title: "Conócenos",
    description: "Quiénes somos, nuestros valores y por qué somos la mejor opción.",
    link: "#",
    iconClass: "fas fa-users size-6 text-secondary group-hover:text-secondary",
  },
  {
    title: "Soluciones",
    description: "Administración, transparencia, mantenimiento, atención y tecnología.",
    link: "#",
    iconClass: "fas fa-cogs size-6 text-secondary group-hover:text-secondary",
  },
  {
    title: "FAQ",
    description: "Respuestas a dudas sobre nuestros servicios y procesos.",
    link: "#",
    iconClass: "fas fa-question-circle size-6 text-secondary group-hover:text-secondary",
  },
  {
    title: "Blog",
    description: "Consejos e información sobre administración residencial.",
    link: "#",
    iconClass: "fas fa-blog size-6 text-secondary group-hover:text-secondary",
  },
  {
    title: "Contacto ",
    description: "Solicita información o agenda una consulta",
    link: "#",
    iconClass: "fas fa-envelope size-6 text-secondary group-hover:text-secondary",
  },
];

const socialIcons = [
  {
    iconClass: "fa-brands fa-facebook size-7 flex-none text-secondary",
  },
  {
    iconClass: "fa-brands fa-instagram size-7 flex-none text-secondary",
  },
  {
    iconClass: "fa-brands fa-square-x-twitter size-7 flex-none text-secondary",
  },
  {
    iconClass: "fa-brands fa-youtube size-7 flex-none text-secondary",
  }
];
---

<div id="menu" class="fixed top-0 z-50 flex w-screen transition-all duration-300 shadow-sm h-[128px]">
  <div class="container m-auto w-screen h-auto flex justify-between items-center px-4 sm:px-6 lg:px-10">
    <!-- Logo de la marca -->
    <div class="flex flex-row items-center">
      <img
        src={brandLogo}
        alt="Aluxez Administración"
        class="w-32 sm:w-40 md:w-48 lg:w-64 h-auto object-contain transition-all duration-300"
        id="brand-logo"
      />
    </div>
    <div class="flex flex-row-reverse">
      <button
        id="menu-toggle"
        class="flex flex-col justify-center items-center w-12 h-12 p-2 relative transition-all duration-300 mr-2 z-[70]"
      >
        <div
          id="line1"
          class="w-8 h-1 bg-secondary rounded transition-transform duration-300 relative z-[61]"
        ></div>
        <div
          id="line2"
          class="w-8 h-1 bg-secondary rounded my-1 transition-opacity duration-300 relative z-[61]"
        ></div>
        <div
          id="line3"
          class="w-8 h-1 bg-secondary rounded transition-transform duration-300 relative z-[61]"
        ></div>
      </button>
    </div>
  </div>

  <!-- Menu dropdown -->
  <div
    id="menu-dropdown"
    class="fixed left-1/2 top-[80px] sm:top-[90px] z-60 flex w-screen max-w-max -translate-x-1/2 px-4 opacity-0 translate-y-1 pointer-events-none transition-all duration-200 max-h-[85vh] sm:max-h-[80vh] overflow-auto"
  >
    <div
      class="w-screen max-w-md flex-auto overflow-hidden rounded-3xl bg-primary-dark text-sm/6 ring-1 shadow-lg ring-gray-900/5 max-h-[85vh] flex flex-col relative"
    >
      <!-- Indicador de scroll -->
      <div id="scroll-indicator" class="absolute bottom-16 right-4 size-8 bg-secondary bg-opacity-70 rounded-full flex items-center justify-center z-20 transition-opacity duration-300 opacity-0 pointer-events-none cursor-pointer hover:bg-opacity-100">
        <i class="fas fa-chevron-down text-primary-dark animate-bounce"></i>
      </div>
      <div id="menu-content" class="p-4 overflow-y-auto flex-1">
        {menuItems.map((item) => (
          <div class="group relative flex gap-x-6 rounded-lg p-4 hover:bg-secondary">
            <div class="mt-1 flex size-11 flex-none items-center justify-center rounded-lg bg-primary group-hover:bg-primary">
              <i class={`${item.iconClass} flex items-center justify-center`} aria-hidden="true"></i>
            </div>
            <div>
              <a
                href={item.link}
                class="font-semibold text-secondary group-hover:text-secondary-dark"
              >
                {item.title}
                <span class="absolute inset-0"></span>
              </a>
              <p class="mt-1 text-secondary group-hover:text-secondary-dark">{item.description}</p>
            </div>
          </div>
        ))}
      </div>
      <div class="grid grid-cols-2 divide-x divide-primary bg-primary-dark flex-shrink-0">
        <a
          href="#"
          class="flex items-center justify-center gap-x-2.5 p-3 font-semibold text-secondary hover:text-secondary"
        >
          {socialIcons.map((icon) => (
            <i class={`${icon.iconClass} flex items-center justify-center`} aria-hidden="true"></i>
          ))}
        </a>
        <a
          href="#"
          class="flex items-center justify-center gap-x-2.5 p-3 font-semibold text-secondary hover:text-secondary"
        >
          <i class="fa-brands fa-whatsapp size-5 flex-none text-green-400" aria-hidden="true"></i>
          9984819782
        </a>
      </div>
    </div>
  </div>
</div>

<script>
  // JavaScript para manejar la interactividad del menú
  interface MenuElements {
    menuElement: HTMLElement | null;
    menuToggle: HTMLElement | null;
    menuDropdown: HTMLElement | null;
    brandLogo: HTMLElement | null;
    line1: HTMLElement | null;
    line2: HTMLElement | null;
    line3: HTMLElement | null;
  }

  class MenuController {
    private elements: MenuElements;
    private isMenuOpen: boolean = false;
    private isScrolled: boolean = false;
    private scrollPosition: number = 0;
    private menuContent: HTMLElement | null = null;
    private scrollIndicator: HTMLElement | null = null;
    private hasScroll: boolean = false;

    constructor() {
      this.elements = {
        menuElement: document.getElementById('menu'),
        menuToggle: document.getElementById('menu-toggle'),
        menuDropdown: document.getElementById('menu-dropdown'),
        brandLogo: document.getElementById('brand-logo'),
        line1: document.getElementById('line1'),
        line2: document.getElementById('line2'),
        line3: document.getElementById('line3')
      };

      this.menuContent = document.getElementById('menu-content');
      this.scrollIndicator = document.getElementById('scroll-indicator');

      this.init();
    }

    init(): void {
      this.bindEvents();
    }

    bindEvents(): void {
      this.elements.menuToggle?.addEventListener('click', () => this.toggleMenu());
      window.addEventListener('scroll', () => this.handleScroll());
      document.addEventListener('click', (event: Event) => this.handleClickOutside(event));
      window.addEventListener('resize', () => this.handleResize());
      
      // Agregar eventos para controlar el indicador de scroll
      if (this.menuContent) {
        this.menuContent.addEventListener('scroll', () => this.handleMenuScroll());
      }
      
      // Agregar evento de clic al indicador de scroll
      if (this.scrollIndicator) {
        this.scrollIndicator.addEventListener('click', () => this.scrollIndicatorClick());
      }
    }
    
    handleResize(): void {
      // Ajustar posición del menú dropdown según el tamaño de la pantalla si está abierto
      if (this.isMenuOpen) {
        if (window.innerHeight < 600) {
          this.elements.menuDropdown?.classList.add('small-screen');
        } else {
          this.elements.menuDropdown?.classList.remove('small-screen');
        }
      }
    }

    toggleMenu(): void {
      this.isMenuOpen = !this.isMenuOpen;
      
      if (this.isMenuOpen) {
        // Guardar posición de scroll actual antes de cualquier cambio
        this.scrollPosition = window.scrollY;
        
        // Abrir menu
        this.elements.menuDropdown?.classList.remove('opacity-0', 'translate-y-1', 'pointer-events-none');
        this.elements.menuDropdown?.classList.add('opacity-100', 'translate-y-0');
        
        // Animar hamburguesa
        this.elements.line1?.classList.add('rotate-45', 'translate-y-2');
        this.elements.line2?.classList.add('opacity-0');
        this.elements.line3?.classList.add('-rotate-45', '-translate-y-2');
        
        // Crear div de espaciador para mantener el contenido en su posición
        const scrollBarWidth = window.innerWidth - document.documentElement.clientWidth;
        document.body.style.paddingRight = `${scrollBarWidth}px`;
        
        // Fijar el body en la posición actual
        document.body.style.top = `-${this.scrollPosition}px`;
        document.body.classList.add('menu-open');
        document.documentElement.classList.add('menu-open');
        
        // Ajustar posición del menú dropdown según el tamaño de la pantalla
        if (window.innerHeight < 600) {
          // Para pantallas muy pequeñas en altura
          this.elements.menuDropdown?.classList.add('small-screen');
        } else {
          this.elements.menuDropdown?.classList.remove('small-screen');
        }
        
        // Asegurarse de que el overlay se muestre correctamente
        document.getElementById('page-overlay')?.classList.add('active');
        
        // Comprobar si el contenido del menú tiene scroll después de abrirse
        // Usamos setTimeout para asegurar que el DOM se ha actualizado
        setTimeout(() => {
          this.handleMenuScroll();
        }, 100);
      } else {
        // Cerrar menu
        this.elements.menuDropdown?.classList.add('opacity-0', 'translate-y-1', 'pointer-events-none');
        this.elements.menuDropdown?.classList.remove('opacity-100', 'translate-y-0');
        
        // Restaurar hamburguesa
        this.elements.line1?.classList.remove('rotate-45', 'translate-y-2');
        this.elements.line2?.classList.remove('opacity-0');
        this.elements.line3?.classList.remove('-rotate-45', '-translate-y-2');
        
        // Restaurar estado normal
        document.body.classList.remove('menu-open');
        document.documentElement.classList.remove('menu-open');
        document.body.style.paddingRight = '';
        document.body.style.top = '';
        
        // Asegurarse de que el overlay se oculte correctamente
        document.getElementById('page-overlay')?.classList.remove('active');
        
        // Ocultar el indicador de scroll
        if (this.scrollIndicator) {
          this.scrollIndicator.style.opacity = "0";
          this.scrollIndicator.style.pointerEvents = "none";
        }
        
        // Restaurar posición de scroll exacta
        window.scrollTo({
          top: this.scrollPosition,
          behavior: 'instant' // Cambio instantáneo sin animación
        });
      }
    }

    handleScroll(): void {
      const scrolled = window.scrollY > 50;
      
      if (scrolled !== this.isScrolled) {
        this.isScrolled = scrolled;
        
        if (this.isScrolled) {
          this.elements.menuElement?.classList.add('bg-primary-dark', 'h-[80px]', 'shadow-lg');
          this.elements.menuElement?.classList.remove('h-[128px]');
          this.elements.brandLogo?.classList.add('w-24', 'sm:w-28', 'md:w-32', 'lg:w-32');
          this.elements.brandLogo?.classList.remove('w-32', 'sm:w-40', 'md:w-48', 'lg:w-64');
        } else {
          this.elements.menuElement?.classList.remove('bg-primary-dark', 'h-[80px]', 'shadow-lg');
          this.elements.menuElement?.classList.add('h-[128px]');
          this.elements.brandLogo?.classList.remove('w-24', 'sm:w-28', 'md:w-32', 'lg:w-32');
          this.elements.brandLogo?.classList.add('w-32', 'sm:w-40', 'md:w-48', 'lg:w-64');
        }
      }
    }

    handleClickOutside(event: Event): void {
      // Detenemos la propagación del evento si se hace clic en el overlay
      const target = event.target as HTMLElement;
      const overlay = document.getElementById('page-overlay');
      
      if (overlay && target === overlay && this.isMenuOpen) {
        // Detenemos el evento para evitar interacciones con el contenido de fondo
        event.preventDefault();
        event.stopPropagation();
      }
    }
    
    // Maneja el scroll dentro del menú y controla la visibilidad del indicador de scroll
    handleMenuScroll(): void {
      if (!this.menuContent || !this.scrollIndicator) return;
      
      const { scrollHeight, scrollTop, clientHeight } = this.menuContent;
      const isScrollable = scrollHeight > clientHeight;
      const isAtBottom = scrollHeight - scrollTop - clientHeight < 10; // Margen de 10px para considerar que está en el fondo
      const isAtTop = scrollTop < 10; // Margen de 10px para considerar que está en la parte superior
      
      // Actualizar el estado de scroll
      this.hasScroll = isScrollable;
      
      if (!this.hasScroll) {
        // No hay scroll, ocultar el indicador
        this.scrollIndicator.style.opacity = "0";
        this.scrollIndicator.style.pointerEvents = "none";
      } else {
        if (isAtBottom) {
          // Estamos al final del scroll, cambiar el ícono o ocultarlo
          if (isAtTop) {
            // Si también estamos en la parte superior, mostrar el indicador hacia abajo
            this.scrollIndicator.style.opacity = "1";
            this.scrollIndicator.style.pointerEvents = "auto";
            this.scrollIndicator.querySelector('i')?.classList.remove('fa-chevron-up');
            this.scrollIndicator.querySelector('i')?.classList.add('fa-chevron-down');
          } else {
            // Si estamos solo al final, mostrar el indicador hacia arriba
            this.scrollIndicator.style.opacity = "1";
            this.scrollIndicator.style.pointerEvents = "auto";
            this.scrollIndicator.querySelector('i')?.classList.remove('fa-chevron-down');
            this.scrollIndicator.querySelector('i')?.classList.add('fa-chevron-up');
          }
        } else if (isAtTop) {
          // Estamos en la parte superior, mostrar el indicador hacia abajo
          this.scrollIndicator.style.opacity = "1";
          this.scrollIndicator.style.pointerEvents = "auto";
          this.scrollIndicator.querySelector('i')?.classList.remove('fa-chevron-up');
          this.scrollIndicator.querySelector('i')?.classList.add('fa-chevron-down');
        } else {
          // Estamos en el medio, mostrar el indicador hacia abajo
          this.scrollIndicator.style.opacity = "1";
          this.scrollIndicator.style.pointerEvents = "auto";
          this.scrollIndicator.querySelector('i')?.classList.remove('fa-chevron-up');
          this.scrollIndicator.querySelector('i')?.classList.add('fa-chevron-down');
        }
      }
    }
    
    // Maneja el clic en el indicador de scroll
    scrollIndicatorClick(): void {
      if (!this.menuContent || !this.scrollIndicator) return;
      
      const { scrollHeight, scrollTop, clientHeight } = this.menuContent;
      const isAtBottom = scrollHeight - scrollTop - clientHeight < 10; // Margen de 10px
      const isPointingUp = this.scrollIndicator.querySelector('i')?.classList.contains('fa-chevron-up');
      
      if (isPointingUp) {
        // Si el indicador apunta hacia arriba, subimos al inicio
        this.menuContent.scrollTo({
          top: 0,
          behavior: 'smooth'
        });
      } else {
        // Si el indicador apunta hacia abajo, bajamos al final
        this.menuContent.scrollTo({
          top: scrollHeight,
          behavior: 'smooth'
        });
      }
    }
  }

  // Event listeners
  document.addEventListener('DOMContentLoaded', () => {
    new MenuController();
  });
</script>
